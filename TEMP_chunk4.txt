    
    # Set title
    title = f"{target}  {asof}  Tâ‰ˆ{T_used:.3f}y  RMSE={info['rmse']:.4f}"
    
    # Ensure correct axis labels (fix for label pollution from term plots)
    ax.set_xlabel("Moneyness (K/S)")
    ax.set_ylabel("Implied Vol")
    
    # Log parameters
    expiry_dt = None
    if "expiry" in dfe.columns and not dfe["expiry"].empty:
        expiry_dt = dfe["expiry"].iloc[0]
    
    last_fit_info = log_smile_parameters(asof, target, expiry_dt, all_results, S, T_used, dfe)
    
    # Add composite overlay if requested
    if overlay_synth and surfaces and weights and target in surfaces:
        try:
            import pandas as pd
            # Resolve date keys robustly (surfaces dict uses pd.Timestamp keys)
            asof_ts = pd.to_datetime(asof).normalize()

            def _resolve_key(dct):
                # map normalized day -> actual key
                norm_map = {pd.to_datetime(k).normalize(): k for k in dct.keys()}
                return norm_map.get(asof_ts, (max(dct.keys()) if dct else None))

            target_key = _resolve_key(surfaces.get(target, {}))
            # Build peer surfaces mapping with per-ticker resolved keys
            peer_tickers = [t for t in weights.keys() if t in surfaces]
            peers_map = {}
            for t in peer_tickers:
                k = _resolve_key(surfaces[t])
                if k is not None and k in surfaces[t]:
                    # combine_surfaces expects dict[ticker][date]->DF
                    peers_map[t.upper()] = {k: surfaces[t][k]}

            if peers_map and target_key is not None and target_key in surfaces[target]:
                from analysis.compositeETFBuilder import combine_surfaces
                synth_by_date = combine_surfaces(peers_map, weights)

                # Choose date to use: prefer target_key if available; else latest in synth
                date_used = target_key if target_key in synth_by_date else (max(synth_by_date.keys()) if synth_by_date else None)
                if date_used is not None and date_used in surfaces[target]:
                    target_grid = surfaces[target][date_used]
                    synthetic_grid = synth_by_date.get(date_used)
                    if synthetic_grid is not None:
                        success = plot_composite_smile_overlay(ax, target_grid, synthetic_grid, T_days)
                        if success:
                            ax.legend(loc="best", fontsize=8)
        except Exception:
            pass
    
    ax.set_title(title)
    
    return info, last_fit_info

